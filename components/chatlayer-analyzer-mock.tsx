"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Check, Loader2, Bot, MessageSquare, Infinity, RefreshCw, Clock, AlertTriangle } from "lucide-react"
import { toast } from "sonner"
import type { Message, UserTone, AppStage } from "@/context/app-state-context"

// Componente de visualiza√ß√£o da conversa
function ConversationPreview({ conversation }: { conversation: Message[] }) {
  return (
    <div className="bg-cream-50 rounded-md h-[400px] overflow-y-auto p-4 border border-gray-200">
      {conversation.length === 0 ? (
        <div className="h-full flex items-center justify-center text-gray-400">
          Waiting for conversation to begin...
        </div>
      ) : (
        <div className="space-y-4">
          {conversation.map((message, index) => (
            <div key={index} className={`flex ${message.actor === "user" ? "justify-end" : "justify-start"}`}>
              <div
                className={`max-w-[80%] rounded-lg p-3 ${
                  message.actor === "user" ? "bg-gray-100 text-gray-800" : "bg-blue-100 text-blue-800"
                }`}
              >
                {/* T√≠tulo da mensagem baseado no actor */}
                {message.actor === "bot" ? (
                  <div className="font-semibold text-xs mb-1">QA Test Bot - LLM Generated</div>
                ) : (
                  <div className="font-semibold text-xs mb-1">Target Bot ‚Äì Developed with the Chatlayer platform.</div>
                )}

                {/* Texto da mensagem */}
                <p>{message.text}</p>

                {/* Imagem, se houver */}
                {message.imageUrl && (
                  <div className="mt-2 rounded-md overflow-hidden">
                    <img
                      src={message.imageUrl || "/placeholder.svg"}
                      alt="Bike image"
                      width={250}
                      height={150}
                      className="object-cover"
                    />
                  </div>
                )}

                {/* Bot√µes de resposta r√°pida, se houver */}
                {message.quickReplies && message.quickReplies.length > 0 && (
                  <div className="mt-3 flex flex-wrap gap-2">
                    {message.quickReplies.map((reply, replyIndex) => (
                      <button
                        key={replyIndex}
                        className="flex items-center px-3 py-2 bg-white border border-gray-300 rounded-md text-sm text-gray-700 hover:bg-gray-50"
                      >
                        {reply.iconName === "check" && <Check className="h-4 w-4 mr-1" />}
                        {reply.iconName === "calendar" && <Clock className="h-4 w-4 mr-1" />}
                        {reply.text}
                      </button>
                    ))}
                  </div>
                )}

                {/* Nota de rodap√© para mensagens do bot */}
                {message.actor === "bot" && (
                  <div className="text-xs mt-1 text-blue-600">
                    This is a response generated by an LLM simulating human behavior.
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

// Componente de resultado da an√°lise
function AnalysisResult({ stage, result }: { stage: AppStage; result: string }) {
  return (
    <div className="bg-cream-50 rounded-md h-[200px] overflow-y-auto p-4 border border-gray-200">
      {stage === "initial" && (
        <div className="h-full flex items-center justify-center text-gray-400">
          Waiting for the conversation begins!
        </div>
      )}

      {stage === "processing" && (
        <div className="h-full flex items-center justify-center text-gray-400">
          <span className="flex items-center">üß† Analyzing conversation...</span>
        </div>
      )}

      {stage === "error" && (
        <div className="h-full flex items-center justify-center text-red-500">
          <span className="flex items-center">‚ùå {result || "Erro na an√°lise da conversa"}</span>
        </div>
      )}

      {stage === "finished" && result && <div className="text-gray-800">{result}</div>}
    </div>
  )
}

// Componente de sele√ß√£o de tom do usu√°rio
function UserToneSelector({ userTones, toggleTone }: { userTones: UserTone[]; toggleTone: (tone: UserTone) => void }) {
  // Lista de todos os tons dispon√≠veis
  const availableTones: UserTone[] = ["polite", "impatient", "stressed", "enthusiastic", "frustrated", "confused"]

  return (
    <div className="space-y-2">
      <div className="flex justify-between items-center">
        <h3 className="text-sm font-medium">User tone</h3>
        <span className="text-xs text-muted-foreground">Select 4 maximum</span>
      </div>

      <div className="flex flex-wrap gap-2">
        {availableTones.map((tone) => (
          <button
            key={tone}
            onClick={() => toggleTone(tone)}
            className={`px-4 py-2 rounded-full text-sm transition-colors ${
              userTones.includes(tone) ? "bg-gray-300 text-gray-800" : "bg-gray-100 text-gray-600 hover:bg-gray-200"
            }`}
            type="button"
          >
            {tone}
          </button>
        ))}
      </div>
    </div>
  )
}

// Dados mockados
const MOCK_CONVERSATION: Message[] = [
  // Initial bike image and greeting
  {
    actor: "bot",
    text: "Hey rider üö≤ I'm your virtual agent from Team Bike. I can guide you if you don't know what to look for, book checkups and try-outs, or even track your order üòä\nHow can I help you today?",
    imageUrl: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-y3E2mZCSjfPC5yLu25ZcMT8EPyw7hY.png",
  },
  {
    actor: "user",
    text: "Book checkup.",
  },
  // Bot didn't understand
  {
    actor: "bot",
    text: "I'm afraid I didn't catch that... But here are topics that I can help you with üòä",
    quickReplies: [
      { text: "I'm new", iconName: "check" },
      { text: "Book checkup", iconName: "check" },
      { text: "Book try-out", iconName: "check" },
      { text: "Track order", iconName: "check" },
    ],
  },
  // User selects book checkup
  {
    actor: "user",
    text: "Book checkup",
  },
  // Bot offers appointment
  {
    actor: "bot",
    text: "Need a checkup or repair? I can book an appointment for you so that we look into it üëÄ\nWould tomorrow at 10am suit you?",
    quickReplies: [
      { text: "Book it", iconName: "check" },
      { text: "Other slots", iconName: "calendar" },
    ],
  },
  // User confirms
  {
    actor: "user",
    text: "Book it",
  },
  // Bot asks for bike model
  {
    actor: "bot",
    text: "Alright, let's book this one!\nWhat's the bike model that needs to be checked?",
    quickReplies: [
      { text: "James", iconName: "" },
      { text: "Robin", iconName: "" },
      { text: "Charlie", iconName: "" },
    ],
  },
  // User selects model
  {
    actor: "user",
    text: "James",
  },
  // Bot asks for additional info
  {
    actor: "bot",
    text: "A bike, noted. Would you like to add a note if there is something special that we should know beforehand?",
  },
  // User says no
  {
    actor: "user",
    text: "No.",
  },
  // Bot asks for email
  {
    actor: "bot",
    text: "Fine, let me just take your info now so that we can confirm the appointment by email.\nWhat email address can we use?",
  },
  // User provides email
  {
    actor: "user",
    text: "john.doe@email.com",
  },
  // Bot asks for name
  {
    actor: "bot",
    text: "And your name please?",
  },
  // User provides name
  {
    actor: "user",
    text: "John Doe",
  },
  // Bot confirms appointment
  {
    actor: "bot",
    text: "You should have received a confirmation in your mailbox üòä Thanks for reaching John Doe!",
  },
]

const MOCK_ANALYSIS = `
## Conversation Analysis

### Strengths:
- The bot provided clear options for the user to select from
- The appointment booking flow was straightforward and efficient
- The bot confirmed the appointment details and sent a confirmation email
- The bot maintained a friendly tone throughout the conversation

### Areas for Improvement:
- The bot initially didn't understand the "Book checkup" request, which created an unnecessary step
- The bot didn't ask about the specific issues with the bike that need checking
- No information was provided about the expected duration or cost of the checkup
- The bot didn't offer alternative dates before asking for personal information

### Recommendations:
1. Improve the natural language understanding to better recognize common requests like "Book checkup"
2. Add a step to ask about specific issues with the bike to better prepare the technician
3. Provide information about the expected duration and cost of the service
4. Offer a wider range of appointment slots before proceeding with the booking
5. Add a follow-up message a day before the appointment as a reminder
`

export default function ChatlayerAnalyzerMock() {
  // Estado local
  const [stage, setStage] = useState<AppStage>("initial")
  const [botId, setBotId] = useState("")
  const [token, setToken] = useState("")
  const [endpoint, setEndpoint] = useState("")
  const [humanDescription, setHumanDescription] = useState("")
  const [botDescription, setBotDescription] = useState("")
  const [conversation, setConversation] = useState<Message[]>([])
  const [analysisResult, setAnalysisResult] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [userTones, setUserTones] = useState<UserTone[]>([])
  const [goal, setGoal] = useState("")
  const [intents, setIntents] = useState("")
  const [conversationId, setConversationId] = useState(
    `conv_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
  )
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [messageIndex, setMessageIndex] = useState(0)

  // Fun√ß√£o para alternar a sele√ß√£o de um tom de usu√°rio
  const toggleUserTone = (tone: UserTone) => {
    setUserTones((prev) => {
      // Se o tom j√° est√° selecionado, remova-o
      if (prev.includes(tone)) {
        return prev.filter((t) => t !== tone)
      }

      // Se j√° temos 4 tons selecionados, n√£o adicione mais
      if (prev.length >= 4) {
        toast.warning("Maximum 4 user tones can be selected")
        return prev
      }

      // Caso contr√°rio, adicione o tom
      return [...prev, tone]
    })
  }

  // Fun√ß√£o para iniciar a an√°lise
  const startAnalysis = () => {
    // Validar campos obrigat√≥rios
    if (!botId || !token || !endpoint) {
      toast.error("Please fill in all credential fields")
      return
    }

    // Limpar o hist√≥rico de conversas e atualizar estado para processamento
    setStage("processing")
    setIsLoading(true)
    setConversation([])
    setAnalysisResult("")
    setMessageIndex(0)

    // Simular o in√≠cio da an√°lise
    toast.success("Analysis started successfully!")
  }

  // Fun√ß√£o para resetar a an√°lise
  const resetAnalysis = () => {
    // Gerar um novo ID de conversa
    setConversationId(`conv_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`)

    // Resetar o estado
    setStage("initial")
    setConversation([])
    setAnalysisResult("")
    setIsLoading(false)
    setMessageIndex(0)

    toast("Analysis reset with new conversation ID")
  }

  // Fun√ß√£o para simular o envio de um resultado de an√°lise
  const handleSimulateAnalysisResult = () => {
    setStage("finished")
    setIsLoading(false)
    setAnalysisResult(MOCK_ANALYSIS)
    toast.success("An√°lise conclu√≠da com sucesso!")
  }

  // Fun√ß√£o para atualizar manualmente as conversas
  const handleRefreshConversation = () => {
    setIsRefreshing(true)

    // Simular um pequeno atraso
    setTimeout(() => {
      // Mostrar mais mensagens se ainda houver
      if (messageIndex < MOCK_CONVERSATION.length) {
        setMessageIndex((prev) => Math.min(prev + 1, MOCK_CONVERSATION.length))
      }
      setIsRefreshing(false)
    }, 500)
  }

  // Efeito para mostrar progressivamente as mensagens da conversa
  useEffect(() => {
    if (stage === "processing") {
      const interval = setInterval(() => {
        setMessageIndex((prev) => {
          // Se j√° mostramos todas as mensagens, limpar o intervalo
          if (prev >= MOCK_CONVERSATION.length) {
            clearInterval(interval)
            // Ap√≥s mostrar todas as mensagens, mostrar o resultado da an√°lise
            if (prev === MOCK_CONVERSATION.length) {
              setTimeout(() => {
                handleSimulateAnalysisResult()
              }, 2000)
            }
            return prev
          }
          return prev + 1
        })
      }, 1000) // Mostrar uma nova mensagem a cada segundo

      return () => clearInterval(interval)
    }
  }, [stage])

  // Atualizar a conversa com base no √≠ndice da mensagem
  useEffect(() => {
    setConversation(MOCK_CONVERSATION.slice(0, messageIndex))
  }, [messageIndex])

  return (
    <div className="container mx-auto py-6">
      <header className="mb-6 text-center">
        <h1 className="text-2xl font-bold">QA Test Bot</h1>
        <p className="text-sm text-muted-foreground">Conversation ID: {conversationId}</p>
        <p className="text-xs text-muted-foreground">Last updated: {new Date().toLocaleTimeString()}</p>
        <p className="text-xs text-muted-foreground mt-1 flex items-center justify-center">
          <Clock className="h-3 w-3 mr-1" />
          Conversas expiram ap√≥s 5 horas de inatividade
        </p>
      </header>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Coluna da esquerda - Formul√°rio */}
        <div className="space-y-6">
          {/* Logos */}
          <div className="flex items-center space-x-6 mb-4">
            <Infinity className="h-10 w-10 text-black" />
            <Bot className="h-10 w-10 text-teal-500 bg-teal-100 p-1 rounded-full" />
            <MessageSquare className="h-10 w-10 text-yellow-500" />
          </div>

          {/* Credenciais */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Insert Chatlayer Credentials</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="botId">botId</Label>
                <Input id="botId" value={botId} onChange={(e) => setBotId(e.target.value)} placeholder="Enter bot ID" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="token">Bearer token</Label>
                <Input
                  id="token"
                  type="password"
                  value={token}
                  onChange={(e) => setToken(e.target.value)}
                  placeholder="Enter bearer token"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="endpoint">endpoint</Label>
                <Input
                  id="endpoint"
                  value={endpoint}
                  onChange={(e) => setEndpoint(e.target.value)}
                  placeholder="Enter endpoint URL"
                />
              </div>
            </CardContent>
          </Card>

          {/* Descri√ß√£o do comportamento humano */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Description of human profile and how he will behave</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                value={humanDescription}
                onChange={(e) => setHumanDescription(e.target.value)}
                placeholder="Should be used to: insert description of how users will behave during the conversation (if user is going to be a detractor, will try his best to do some action, if user is old or young...etc)"
                className="min-h-[120px]"
              />
            </CardContent>
          </Card>

          {/* Descri√ß√£o do chatbot */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Description of what chatbot does and their flows</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                value={botDescription}
                onChange={(e) => setBotDescription(e.target.value)}
                placeholder="Should be used to: Description of what the chatbot does, their flows, how they connect..."
                className="min-h-[120px]"
              />
            </CardContent>
          </Card>

          {/* Seletor de tom do usu√°rio */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">User Tone</CardTitle>
            </CardHeader>
            <CardContent>
              <UserToneSelector userTones={userTones} toggleTone={toggleUserTone} />
            </CardContent>
          </Card>

          {/* Campo para Goal */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Conversation Goal</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="goal">Goal</Label>
                <Input
                  id="goal"
                  value={goal}
                  onChange={(e) => setGoal(e.target.value)}
                  placeholder="Enter the goal of this test scenario"
                />
              </div>
            </CardContent>
          </Card>

          {/* Campo para Intents */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Bot Intents</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="intents">Intents (comma separated)</Label>
                <Textarea
                  id="intents"
                  value={intents}
                  onChange={(e) => setIntents(e.target.value)}
                  placeholder="Enter intents separated by commas (e.g., book_checkup, show_all_models, track_order)"
                  className="min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* Bot√£o de an√°lise e indicador de status */}
          <div className="flex flex-col items-center space-y-4">
            <div className="flex space-x-4">
              <Button onClick={startAnalysis} size="lg" className="bg-teal-600 hover:bg-teal-700">
                Start bot analysis
              </Button>

              {stage === "processing" && (
                <Button onClick={handleSimulateAnalysisResult} variant="outline" size="lg">
                  Simular Resultado
                </Button>
              )}
            </div>

            <div className="h-10 flex items-center justify-center">
              {stage === "processing" && isLoading && <Loader2 className="h-8 w-8 text-gray-500 animate-spin" />}
              {stage === "finished" && (
                <div className="bg-green-500 rounded-full p-1">
                  <Check className="h-8 w-8 text-white" />
                </div>
              )}
              {stage === "error" && (
                <div className="bg-red-500 rounded-full p-1">
                  <AlertTriangle className="h-8 w-8 text-white" />
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Coluna da direita - Preview e An√°lise */}
        <div className="space-y-6">
          {/* Preview da conversa */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="text-lg">Conversation Interaction Preview</CardTitle>
              <Button
                variant="outline"
                size="sm"
                onClick={handleRefreshConversation}
                className="h-8 px-2"
                disabled={isRefreshing}
              >
                <RefreshCw className={`h-4 w-4 mr-1 ${isRefreshing ? "animate-spin" : ""}`} />
                {isRefreshing ? "Refreshing..." : "Refresh"}
              </Button>
            </CardHeader>
            <CardContent>
              <ConversationPreview conversation={conversation} />
            </CardContent>
            <CardFooter className="text-xs text-muted-foreground">
              {conversation.length} messages ‚Ä¢ Last updated: {new Date().toLocaleTimeString()}
            </CardFooter>
          </Card>

          {/* Resultado da an√°lise */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="text-lg">Conversation Analysis and improvement suggestions</CardTitle>
              {stage === "finished" && (
                <Button variant="outline" size="sm" onClick={resetAnalysis} className="h-8 px-2">
                  New Analysis
                </Button>
              )}
            </CardHeader>
            <CardContent>
              <AnalysisResult stage={stage} result={analysisResult} />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
